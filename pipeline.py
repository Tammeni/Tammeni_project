# -*- coding: utf-8 -*-
"""Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11LADGH-fZqWW8xeb7jfp_75ucK4N8NMl

# Imports
"""

#!pip install jais transformers datasets torch evaluate regex accelerate xgboost

import numpy as np
import pandas as pd
#import jais.models

import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

from sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV, cross_val_score, learning_curve
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.ensemble import RandomForestClassifier
#from sklearn.linear_model import LogisticRegression, ElasticNet
from sklearn.svm import SVC
#from sklearn.tree import DecisionTreeClassifier
from sklearn.decomposition import PCA
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder, MultiLabelBinarizer
from imblearn.over_sampling import SMOTE
#import xgboost as xgb
from sklearn.metrics.pairwise import cosine_similarity
#from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

import nltk
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.stem.isri import ISRIStemmer
from nltk.corpus import stopwords
from sentence_transformers import SentenceTransformer
from sentence_transformers.util import cos_sim
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig, AutoModel
from huggingface_hub import login

import regex as reg
import re
import ast
import torch

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

LE = LabelEncoder()
AnxEncoder = LabelEncoder()
DepEncoder = LabelEncoder()
smote = SMOTE(random_state=42)
Sbert = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')

"""# to upload model files"""

# Replace 'model.pkl' with the exact filename of your uploaded file
import joblib

# Load models
Anx_model = joblib.load('/content/SVM_ANXIETY.pkl')
Dep_model = joblib.load('/content/SVM_DEPRESSION.pkl')

"""# CLEAN TEXT"""

def clean_text(text):
  cleaned = re.sub(r'[\'\"\n\d,;.،؛.؟]', ' ', text)
  cleaned = re.sub(r'\s{2,}', ' ', cleaned)

  emoji_pattern = re.compile("["
  u"\U0001F600-\U0001F64F" # emoticons
  u"\U0001F300-\U0001F5FF" # symbols
  u"\U0001F680-\U0001F6FF" # transport/map symbols
  u"\U0001F1E0-\U0001F1FF" # flags
  u"\U00002702-\U000027B0"
  u"\U000024C2-\U0001F251"
  "]+", flags=re.UNICODE)
  cleaned = emoji_pattern.sub(r'', cleaned)
  cleaned = re.sub(r'[\u064B-\u0652]', '', cleaned) # tashkeel removal
  # Normalization
  cleaned = re.sub(r'[إأآا]', 'ا', cleaned)
  cleaned = cleaned.replace('ة', 'ه')
  cleaned = cleaned.replace('ى', 'ي')
  cleaned = cleaned.replace("ؤ", "و")
  cleaned = cleaned.replace("ئ", "ي")
  return cleaned.strip()

"""# SBERT"""

def encode_Sbert(questions,answers):
  questions = [clean_text(text) for text in questions]
  question_embeddings = Sbert.encode(questions, convert_to_tensor=True,normalize_embeddings=True)
  similarities = []
  for _, answer in answers.iterrows():
    answer_embeddings = Sbert.encode(answer.tolist(), convert_to_tensor=True, normalize_embeddings=True)
    row_similarities = cos_sim(question_embeddings, answer_embeddings).diagonal()
    similarities.append(row_similarities.tolist())
  df = pd.DataFrame(similarities, columns=[f"Q{i+1}_sim" for i in range(len(questions))])
  return df

"""# Get Probability"""

def get_score(model, X_test):
  return model.predict_proba(X_test)

"""# Confusion MAtrix"""

def ConfusionMatrix(y_test, y_pred):
  cm = confusion_matrix(y_test, y_pred)
  disp = ConfusionMatrixDisplay(confusion_matrix=cm)
  disp.plot(cmap=plt.cm.Blues)
  plt.show()

"""# Learning Curve"""

import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import LearningCurveDisplay, ShuffleSplit

def LearningCurve(estimator, X, y, title=None):

    fig, ax = plt.subplots(figsize=(7, 5))

    LearningCurveDisplay.from_estimator(
        estimator,
        X=X,
        y=y,
        train_sizes=np.linspace(0.1, 1.0, 5),
        cv=ShuffleSplit(n_splits=50, test_size=0.2, random_state=0),
        score_type="both",
        n_jobs=4,
        line_kw={"marker": "o"},
        std_display_style="fill_between",
        score_name="Accuracy",
        ax=ax
    )

    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles[:2], ["Training Score", "Test Score"])
    ax.set_title(title or f"Learning Curve for {estimator.__class__.__name__}")
    ax.grid(True)
    plt.tight_layout()
    plt.show()

"""# SVM MODEL"""

def SVM(X,y):
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
  svm = SVC(kernel='rbf', C=1.0, gamma='scale', random_state=42,probability=True)
  svm.fit(X_train, y_train)
  y_pred = svm.predict(X_test)
  print("Accuracy:", accuracy_score(y_test, y_pred))
  print("\nClassification Report:\n", classification_report(y_test, y_pred))
  ConfusionMatrix(y_test, y_pred)
  LearningCurve(svm, X_train, y_train)
  return svm, get_score(svm, X_test)

"""# SMOTE"""

def up_sample(X, Y):
  return smote.fit_resample(X, Y)

from transformers import pipeline

def SA(df,Qs):
  model_name = "CAMeL-Lab/bert-base-arabic-camelbert-da-sentiment"
  # model_name = "akhooli/bert-base-arabic-camelbert-da-sentiment"

  classifier = pipeline("sentiment-analysis", model=model_name, tokenizer=model_name)

  label_map = {
        'negative': -1,
        'neutral': 0,
        'positive': 1
    }
  df['SA'] = df[Qs].apply(lambda row: ' '.join(row.values.astype(str)), axis=1)
  df['class'] = df['SA'].apply(lambda x: classifier(x)[0]['label'])
  df.drop(['SA'], axis= 1, inplace = True)
  df['class'] = df['class'].map(label_map)
  return df

"""# Classify"""

def Classify(model,X_test):

  return get_score(model, X_test)

"""# Don't delete"""

df = pd.read_excel('/content/final_tammeni_augmented_final.xlsx')
df.drop('Source',axis = 1 , inplace = True)
df = df.sample(frac=1, random_state=42).reset_index(drop=True)
df.iloc[::,:6] = df.iloc[::,:6].astype(str).applymap(clean_text)
df['Gender'] = LE.fit_transform(df['Gender'])
df['Age Group'] = LE.fit_transform(df['Age Group'])



# # depression
df_dep = df.iloc[::,[0,1,2,6,7,8]]
df_dep = df_dep[~df_dep['Diagnosis'].apply(lambda x: "Anxiety" in x)].reset_index(drop=True)
df_dep['Diagnosis'] = df_dep['Diagnosis'].apply(lambda x: x[0] if isinstance(x, list) and len(x) == 1 else x)
df_dep['Diagnosis'] = DepEncoder.fit_transform(df_dep['Diagnosis'])
# # anxiety
df_anx = df.iloc[::,2:]
df_anx = df_anx[~df_anx['Diagnosis'].apply(lambda x: "Depression" in x)].reset_index(drop=True)
df_anx['Diagnosis'] = df_anx['Diagnosis'].apply(lambda x: x[0] if isinstance(x, list) and len(x) == 1 else x)
df_anx = df_anx[~df_anx['Diagnosis'].apply(lambda x: 'Anxiety' in x and 'Healthy' in x)].reset_index(drop=True)
df_anx['Diagnosis'] = AnxEncoder.fit_transform(df_anx['Diagnosis'])

questions_dep = df_dep.columns.to_list()[:3]
answers_dep = df_dep[questions_dep]
X = encode_Sbert(questions_dep, answers_dep.iloc[::,:3])
y = df_dep['Diagnosis']
X, y = up_sample(X, y)
svm_dep, SVMDepScore = SVM(X,y)

questions_anx = df_anx.columns.to_list()[:4]
answers_anx = df_anx[questions_anx]
X = encode_Sbert(questions_anx, answers_anx.iloc[::,:4])
y = df_anx['Diagnosis']
X, y = up_sample(X, y)
svm_anx, SVMAnxScore = SVM(X,y)

import joblib

# Save models using safe format
joblib.dump(svm_dep, "SVM_DEPRESSION_FIXED.pkl", compress=3, protocol=4)
joblib.dump(svm_anx, "SVM_ANXIETY_FIXED.pkl", compress=3, protocol=4)

from google.colab import files
files.download("SVM_DEPRESSION_FIXED.pkl")
files.download("SVM_ANXIETY_FIXED.pkl")



"""# Assuming we have user input in ***df_user***"""

import pandas as pd

# Define column names exactly as the full questions you provided
columns = [
    "4-\nهل مررت بفترة استمرت أسبوعين أو أكثر كنت تعاني خلالها من خمسة أعراض أو أكثر مما يلي، مع ضرورة وجود عرض المزاج المكتئب أو فقدان الشغف والاهتمام بالأنشطة التي كنت تستمتع بها سابقًا؟ الأعراض تشمل:\nالشعور بمزاج مكتئب معظم ساعات اليوم، يوميًا، على مدى أسبوعين أو أكثر، سواء كان هذا الشعور متمثلًا في الحزن، فقدان الأمل بالمستقبل، الشعور بالفراغ، أو البكاء المتكرر.\nالإحساس المستمر بالتعب والإرهاق او فقدان واضح للشغف أو الاهتمام بالقيام بالواجبات أو الأنشطة اليومية، بحيث تشعر أنك لا تجد متعة في أي منها معظم اليوم وعلى مدار أسبوعين.\nتغيّر ملحوظ في الشهية سواء بالزيادة أو النقصان، أو تغيّر في الوزن بما يزيد أو ينقص عن 5% من وزنك الطبيعي.\nصعوبة في النوم أو زيادة في عدد ساعات النوم بشكل واضح.\nالشعور بالخمول الذهني والحركي أو على العكس، وجود نشاط حركي غير هادف ومتبعثر.\nالشعور بفقدان القيمة الذاتية أو الأهمية، أو تأنيب ضمير مبالغ فيه حيال أمور قد تكون بسيطة.\nصعوبة ملحوظة في التركيز، اتخاذ القرارات، أو التفكير بوضوح خلال اليوم.وجود أفكار متكررة تتعلق بتمني الموت أو التفكير بالانتحار. \n اذكر الأعراض اللتي عانيت منها بالتفصيل و كيف أثرت عليك؟",
    "5-\nهل أدت الأعراض التي مررت بها إلى شعورك بضيق نفسي شديد أو إلى تعطيل واضح لقدرتك على أداء مهامك اليومية، سواء في حياتك الاجتماعية، الوظيفية، أو الشخصية؟ كيف لاحظت تأثير ذلك عليك وعلى تفاعلاتك مع من حولك؟",
    "6-\nهل هذه الأعراض التي عانيت منها لم تكن ناتجة عن تأثير أي مواد مخدرة، أدوية معينة، أو بسبب حالة مرضية عضوية أخرى قد تكون أثرت على سلوكك أو مشاعرك خلال تلك الفترة؟",
    "1-\n  هل تجد نفسك تعاني من التفكير المفرط أو القلق الزائد تجاه مختلف الأمور الحياتية المحيطة بك، سواء كانت متعلقة بالعمل، الدراسة، المنزل، أو غيرها من الجوانب اليومية؟اعط امثلة على بعض من هذه الأمور وكيف يؤثرالتفكير و القلق بها على أفكارك وسلوكك خلال اليوم؟  ",
    "2-\nهل تواجه صعوبة في السيطرة على أفكارك القلقة أو التحكم في مستوى القلق الذي تشعر به، بحيث تشعر أن الأمر خارج عن إرادتك أو أنه مستمر على نحو يرهقك؟ اجعل اجابتك تفصيلية بحيث توضح كيف يكون خارج عن ارادتك او الى اي مدى يرهقك",
    "3-\nهل يترافق مع التفكير المفرط أو القلق المستمر ثلاثة أعراض أو أكثر من الأعراض التالية:\nالشعور بعدم الارتياح أو بضغط نفسي كبير\nالإحساس بالتعب والإرهاق بسهولة حتى عند القيام بأعمال يومية بسيطة\nصعوبة واضحة في التركيز على المهام أو الاستمرار فيها بسبب تشوش التفكير\nالشعور بالعصبية الزائدة أو الانفعالية المفرطة تجاه مواقف قد تكون عادية\nوجود شد عضلي مزمن أو شعور بالانزعاج الجسدي دون سبب واضح\nاضطرابات في النوم، سواء من خلال مواجهة صعوبة في الدخول إلى النوم، الاستيقاظ المتكرر، أو النوم بشكل غير مريح وغير كافٍ\n اذكر كل عرض تعاني منه، ؟و هل يؤثر على مهامك اليومية مثل العمل او الدراسة او حياتك الاجتماعي؟و كيف يؤثرعليك بشكل يومي؟ ",
    "Age Group",
    "Gender"
]

# Answers from my first response (detailed responses)
answers = [
    (
        "نعم، مررت بفترة دامت أكثر من أسبوعين عانيت خلالها من:\n"
        "- مزاج مكتئب: شعرت بالحزن والفراغ معظم ساعات اليوم.\n"
        "- فقدان الشغف: لم أعد أستمتع بأي شيء حتى الهوايات التي كنت أحبها.\n"
        "- تغيّر في النوم: أصبحت أنام لساعات طويلة جدًا ومع ذلك أشعر بالتعب.\n"
        "- الإرهاق والتعب: أي نشاط يشعرني بالإجهاد، حتى الاستحمام أحيانًا.\n"
        "- الشعور بعدم القيمة: كنت أرى نفسي بلا فائدة، وألوم نفسي على كل شيء.\n"
        "- صعوبة في التركيز: لم أكن أستطيع قراءة صفحة أو متابعة فيلم.\n"
        "- أفكار عن الموت: راودتني أفكار تتعلق بتمني الموت كوسيلة للراحة.\n"
        "هذه الأعراض أثّرت عليّ بشكل كبير، أصبحت أشعر أن الحياة لا معنى لها، وكل يوم يمرّ يكون أثقل من الذي قبله."
    ),
    (
        "نعم، شعرت بضيق نفسي شديد لدرجة أنني لم أعد أخرج من غرفتي، ولا أشارك في أي نشاط اجتماعي. "
        "فقدت الرغبة في الدراسة والعمل، وأصبحت أتغيب باستمرار. تدهورت علاقتي بعائلتي لأنني أصبحت سريع الانفعال أو أنعزل دون تفسير. "
        "حتى في المواقف اليومية البسيطة، أشعر أنني غير قادر على التعامل معها، وكأنني غير مؤهل للحياة."
    ),
    (
        "صحيح، هذه الأعراض ليست ناتجة عن أي مواد مخدرة أو أدوية. "
        "لم أكن أتناول أي شيء قد يؤثر على حالتي النفسية. الأعراض ظهرت تدريجيًا وبدون سبب عضوي واضح، ولذلك أدركت أن المشكلة على الأغلب نفسية وتحتاج إلى تدخل وعلاج."
    ),
    (
        "نعم، أعاني كثيرًا من التفكير المفرط والقلق الزائد، خصوصًا فيما يتعلق بمستقبلي المهني، "
        "علاقتي بعائلتي، والوضع المادي. غالبًا ما أجد نفسي أفكر في أسوأ السيناريوهات، حتى في أبسط المواقف. "
        "مثلًا، إذا لم يرد أحد على رسالتي مباشرة، أبدأ في التفكير أنه غاضب مني أو أني قلت شيئًا خاطئًا. "
        "هذا النوع من التفكير يستهلك جزءًا كبيرًا من يومي ويجعلني دائمًا متوترًا ومنهكًا ذهنيًا."
    ),
    (
        "نعم، أشعر وكأن عقلي لا يتوقف عن العمل، حتى في أكثر اللحظات هدوءًا. "
        "أحاول إقناع نفسي أن كل شيء على ما يرام، ولكن القلق يعود بسرعة وكأنني لا أتحكم به أبدًا. "
        "هذا الإرهاق العقلي يجعلني أحيانًا أعجز عن إنجاز أي مهام، حتى لو كانت بسيطة. "
        "أشعر بأنني مستنزف من الداخل، وأحيانًا أبكي بلا سبب واضح فقط لأني أشعر أنني \"معلق\" في دائرة لا تنتهي من القلق والتفكير."
    ),
    (
        "نعم، أعاني من عدة أعراض:\n"
        "- الإحساس بالتعب والإرهاق: أستنزف طاقتي بسرعة حتى في أبسط المهام.\n"
        "- صعوبة التركيز: ذهني دائمًا مشوش وأفكاري متقاطعة، لا أستطيع القراءة أو التركيز في العمل.\n"
        "- الشد العضلي: غالبًا ما أعاني من ألم في الرقبة والكتفين بدون سبب واضح.\n"
        "- الانفعال: أكون حساسًا جدًا وأتضايق بسهولة، وأحيانًا أتصرف بعصبية تجاه من حولي.\n"
        "- اضطرابات النوم: أجد صعوبة في النوم، وعندما أنام أستيقظ كثيرًا ولا أشعر بالراحة.\n"
        "هذه الأعراض تؤثر عليّ في دراستي وعلاقاتي بشكل ملحوظ. أصبحت منعزلًا عن أصدقائي، ومهامي اليومية تتراكم لأنني لا أملك الطاقة أو التركيز اللازم للقيام بها."
    ),
    "18-25",
    "Male"
]

# Create DataFrame
input = pd.DataFrame([answers], columns=columns)



questions_dep = input.columns.to_list()[:3]
answers_dep = input.iloc[::,:3].astype(str).applymap(clean_text)
X = encode_Sbert(questions_dep, answers_dep.iloc[::,:3])
score_dep = Classify(Dep_model,X)
Healthy1 = score_dep[0][1]
Depressed = score_dep[0][0]

questions_anx = input.columns.to_list()[2:6]
answers_anx = input.iloc[::,2:6].astype(str).applymap(clean_text)
X = encode_Sbert(questions_anx, answers_anx)
score_anx = Classify(Anx_model,X)
Healthy2 = score_anx[0][1]
anxiety = score_anx[0][0]

print(f"Depression : {(Depressed*100):.2f}")
print(f"Anxiety : {(anxiety*100):.2f}")
print(f"Healthy: {(((Healthy1 + Healthy2) / 2)*100):.2f}")

def analyze_user_responses(questions, answers):
    cleaned_questions = [clean_text(q) for q in questions]
    cleaned_answers = [clean_text(a) for a in answers]
    encoded = encode_Sbert(cleaned_questions, cleaned_answers)

    dep_score = get_score(Dep_model, encoded)[0]
    anx_score = get_score(Anx_model, encoded)[0]

    return {
        "Depression": round(dep_score[0] * 100, 2),
        "Healthy (Depression Model)": round(dep_score[1] * 100, 2),
        "Anxiety": round(anx_score[0] * 100, 2),
        "Healthy (Anxiety Model)": round(anx_score[1] * 100, 2)
    }