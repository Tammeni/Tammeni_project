# -*- coding: utf-8 -*-
import streamlit as st
from pymongo import MongoClient
from datetime import datetime
import random
import pandas as pd
import joblib
import os
from pipeline import encode_Sbert, clean_text, clean_and_stem_arabic, get_score

# ----------------- Load Trained Models -----------------
model_path = os.getcwd()
rfc_dep = joblib.load(os.path.join(model_path, 'rfc_dep.pkl'))
rfc_anx = joblib.load(os.path.join(model_path, 'rfc_anx.pkl'))
# ----------------- Database Connection -----------------
uri = "mongodb+srv://tammeni25:mentalhealth255@tamminicluster.nunk6nw.mongodb.net/?retryWrites=true&w=majority&authSource=admin"
client = MongoClient(uri)
db = client["tammini_db"]
users_col = db["users"]
responses_col = db["responses"]

# ----------------- Page Config -----------------
st.set_page_config(page_title="ููุตุฉ ุทููููู", layout="centered", page_icon=None)

# ----------------- Landing Page -----------------
def show_landing_page():
    st.markdown("""
        <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap" rel="stylesheet">
        <style>
        html, body, .stApp {
            background-color: #e6f7ff;
            font-family: 'Cairo', sans-serif;
            direction: rtl;
        }
        .landing-container {
            text-align: center;
            padding: 40px;
            background-color: #d4ecf7;
            border-radius: 16px;
            margin-bottom: 30px;
            box-shadow: 0px 0px 15px rgba(0, 91, 153, 0.1);
        }
        h1 {
            color: #005b99;
            font-size: 48px;
            margin-bottom: 10px;
        }
        h3 {
            color: #333;
            font-size: 20px;
            margin-bottom: 10px;
        }
        .note {
            font-size: 18px;
            color: #005b99;
            background-color: #e6f2ff;
            padding: 10px;
            border-radius: 8px;
            display: inline-block;
            margin-top: 15px;
        }
        </style>
        <div class='landing-container'>
            <h1>ุทููููู</h1>
            <h3>ููุตุฉ ุชูููู ุงูุตุญุฉ ุงูููุณูุฉ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู</h3>
            <div class='note'>ูุฐู ุงูููุตุฉ ูุง ุชูุนุฏ ุจุฏููุงู ุนู ุงูุทุจูุจุ ุจู ุชูุณุงุนุฏ ุงูุฃุทุจุงุก ูู ุงุชุฎุงุฐ ูุฑุงุฑุงุชูู</div>
        </div>
    """, unsafe_allow_html=True)

    if st.button("ุชุณุฌูู ุงูุฏุฎูู / ุฅูุดุงุก ุญุณุงุจ"):
        st.session_state.page = "auth"

# ----------------- Auth -----------------
def signup():
    st.markdown("""
        <h1 style='text-align: center; color: #005b99;'>ุทููููู</h1>
    """, unsafe_allow_html=True)
    st.subheader("ุชุณุฌูู ุญุณุงุจ ุฌุฏูุฏ")
    username = st.text_input("ุงุณู ุงููุณุชุฎุฏู")
    password = st.text_input("ูููุฉ ุงููุฑูุฑ", type="password")
    if st.button("ุชุณุฌูู"):
        existing_user = users_col.find_one({"username": username})
        if existing_user:
            st.warning("ูุฐุง ุงููุณุชุฎุฏู ูุณุฌู ุจุงููุนู. ูุชู ุนุฑุถ ุงูุชูุฑูุฑ ุงูุฃูู:")
            existing_response = responses_col.find_one({"username": username}, sort=[("timestamp", 1)])
            if existing_response:
                st.markdown("### ุงูุชูุฑูุฑ ุงูุฃูู ูููุณุชุฎุฏู:")
                st.write(f"ุงูุฌูุณ: {existing_response['gender']}")
                st.write(f"ุงูุนูุฑ: {existing_response['age']}")
                for i in range(1, 7):
                    st.write(f"ุณ{i}: {existing_response.get(f'q{i}', '')}")
                if "result" in existing_response:
                    st.success(f"ุงููุชูุฌุฉ: {existing_response['result']}")
                else:
                    st.info("ูู ูุชู ุชุญููู ุงููุชูุฌุฉ ุจุนุฏ.")
            else:
                st.info("ูุง ุชูุฌุฏ ุฑุฏูุฏ ุณุงุจูุฉ.")
        else:
            users_col.insert_one({"username": username, "password": password})
            st.success("ุชู ุงูุชุณุฌูู ุจูุฌุงุญ! ููููู ุงูุขู ุชุณุฌูู ุงูุฏุฎูู.")

def login():
    st.markdown("""
        <h1 style='text-align: center; color: #005b99;'>ุทููููู</h1>
    """, unsafe_allow_html=True)
    st.subheader("ุชุณุฌูู ุงูุฏุฎูู")
    username = st.text_input("ุงุณู ุงููุณุชุฎุฏู")
    password = st.text_input("ูููุฉ ุงููุฑูุฑ", type="password")
    if st.button("ุฏุฎูู"):
        user = users_col.find_one({"username": username, "password": password})
        if user:
            st.session_state['user'] = username
            st.success("ูุฑุญุจุงู ุจูุ ุชู ุชุณุฌูู ุงูุฏุฎูู.")

            if st.button("ุนุฑุถ ุณุฌู ุงููุณุชุฎุฏู"):
                history = responses_col.find({"username": username}).sort("timestamp", -1)
                for i, resp in enumerate(history, 1):
                    st.markdown(f"---\n### ุงููุญุงููุฉ ุฑูู {i}:")
                    st.write(f"ุงูุชุงุฑูุฎ: {resp['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
                    st.write(f"ุงูุฌูุณ: {resp['gender']}")
                    st.write(f"ุงูุนูุฑ: {resp['age']}")
                    for qn in range(1, 7):
                        st.write(f"ุณ{qn}: {resp.get(f'q{qn}', '')}")
                    if "result" in resp:
                        st.success(f"ุงููุชูุฌุฉ: {resp['result']}")
                    else:
                        st.info("ูู ูุชู ุชุญููู ุงููุชูุฌุฉ ุจุนุฏ.")
        else:
            st.error("ุจูุงูุงุช ุงูุฏุฎูู ุบูุฑ ุตุญูุญุฉ.")
# ----------------- Result Page -----------------
def show_results():
    st.markdown("""
        <h2 style='color:#005b99;'>๐ ูุชุงุฆุฌ ุงูุชูููู</h2>
    """, unsafe_allow_html=True)

    if 'latest_result' in st.session_state:
        st.write(st.session_state['latest_result'])
    else:
        st.info("ูุง ุชูุฌุฏ ูุชุงุฆุฌ ูุชุงุญุฉ ุญุงููุงู.")
# ----------------- Questionnaire -----------------
def questionnaire():
    st.subheader("ุงูุชูููู ุงูููุณู")
    gender = st.radio("ูุง ูู ุฌูุณูุ", ["ุฐูุฑ", "ุฃูุซู"])
    age = st.radio("ูุง ูู ูุฆุชู ุงูุนูุฑูุฉุ", ["18-29", "30-39", "40-49", "50+"])
        questions = {
        1: """ุณ1: ูู ูุฑุฑุช ุจูุชุฑุฉ ุงุณุชูุฑุช ุฃุณุจูุนูู ุฃู ุฃูุซุฑ ููุช ุชุนุงูู ุฎูุงููุง ูู ุฎูุณุฉ ุฃุนุฑุงุถ ุฃู ุฃูุซุฑ ููุง ูููุ ูุน ุถุฑูุฑุฉ ูุฌูุฏ ุนุฑุถ ุงููุฒุงุฌ ุงูููุชุฆุจ ุฃู ููุฏุงู ุงูุดุบู ูุงูุงูุชูุงู ุจุงูุฃูุดุทุฉ ุงูุชู ููุช ุชุณุชูุชุน ุจูุง ุณุงุจููุงุ
              5 ุงูุฃุนุฑุงุถ ุชุดูู: ุงูุดุนูุฑ ุจูุฒุงุฌ ููุชุฆุจ ูุนุธู ุณุงุนุงุช ุงูููู ูููููุง ุนูู ูุฏู ุฃุณุจูุนูู ุฃู ุฃูุซุฑ  (ูุซู ุงูุญุฒูุ ููุฏุงู ุงูุฃููุ ุงูุดุนูุฑ ุจุงููุฑุงุบุ ุฃู ุงูุจูุงุก ุงููุชูุฑุฑ)ุ  ุงูุฅุญุณุงุณ ุงููุณุชูุฑ ุจุงูุชุนุจ ูุงูุฅุฑูุงูุ ููุฏุงู ูุงุถุญ ููุดุบู ุฃู ุงูุงูุชูุงู ุจุงูููุงู ุจุงููุงุฌุจุงุช ุฃู ุงูุฃูุดุทุฉ ุงูููููุฉุ ุชุบูุฑ ูู ุงูุดููุฉ (ุฒูุงุฏุฉ ุฃู ููุตุงู) ุฃู ุงููุฒู ุจุฃูุซุฑ ูู %ุ ุตุนูุจุฉ ูู ุงูููู ุฃู ุฒูุงุฏุฉ ูู ุนุฏุฏ ุณุงุนุงุช ุงููููุ  ุงูุดุนูุฑ ุจุงูุฎููู ุงูุฐููู ุฃู ุงูุญุฑูู ุฃู ุนูู ุงูุนูุณุ ูุฌูุฏ ูุดุงุท ุญุฑูู ุบูุฑ ูุงุฏู ููุจุนุซุฑุ ุงูุดุนูุฑ ุจููุฏุงู ุงููููุฉ ุงูุฐุงุชูุฉ ุฃู ุชุฃููุจ ุถููุฑ ูุจุงูุบ ูููุ  ุตุนูุจุฉ ูู ุงูุชุฑููุฒ ุฃู ุงุชุฎุงุฐ ุงููุฑุงุฑุงุชุ  ูุฌูุฏ ุฃููุงุฑ ูุชูุฑุฑุฉ ุชุชุนูู ุจุชููู ุงูููุช ุฃู ุงูุชูููุฑ ุจุงูุงูุชุญุงุฑ. ุงุฐูุฑ ุงูุฃุนุฑุงุถ ุงูุชู ุนุงููุช ูููุง ุจุงูุชูุตูู ูููู ุฃุซุฑุช ุนูููุ""",

        2: """ุณ2: ูู ุฃุฏุช ุงูุฃุนุฑุงุถ ุงูุชู ูุฑุฑุช ุจูุง ุฅูู ุดุนูุฑู ุจุถูู ููุณู ุดุฏูุฏ ุฃู ุฅูู ุชุนุทูู ูุงุถุญ ููุฏุฑุชู ุนูู ุฃุฏุงุก ููุงูู ุงูููููุฉุ 
               ุณูุงุก ูู ุญูุงุชู ุงูุงุฌุชูุงุนูุฉุ ุงููุธูููุฉุ ุฃู ุงูุดุฎุตูุฉุ ููู ูุงุญุธุช ุชุฃุซูุฑ ุฐูู ุนููู ูุนูู ุชูุงุนูุงุชู ูุน ูู ุญูููุ""",

        3: """ุณ3: ูู ูุฐู ุงูุฃุนุฑุงุถ ุงูุชู ุนุงููุช ูููุง ูู ุชูู ูุงุชุฌุฉ ุนู ุชุฃุซูุฑ ุฃู ููุงุฏ ูุฎุฏุฑุฉุ 
              ุฃุฏููุฉ ูุนููุฉุ ุฃู ุจุณุจุจ ุญุงูุฉ ูุฑุถูุฉ ุนุถููุฉ ุฃุฎุฑู ูุฏ ุชููู ุฃุซุฑุช ุนูู ุณูููู ุฃู ูุดุงุนุฑู ุฎูุงู ุชูู ุงููุชุฑุฉุ""",

        4: """ุณ4: ูู ุชุฌุฏ ููุณู ุชุนุงูู ูู ุงูุชูููุฑ ุงูููุฑุท ุฃู ุงูููู ุงูุฒุงุฆุฏ ุชุฌุงู ูุฎุชูู ุงูุฃููุฑ ุงูุญูุงุชูุฉ ุงููุญูุทุฉ ุจูุ  ุณูุงุก ูุงูุช ูุชุนููุฉ ุจุงูุนููุ ุงูุฏุฑุงุณุฉุ ุงูููุฒูุ ุฃู ุบูุฑูุง ูู ุงูุฌูุงูุจ ุงูููููุฉุ 
                   ุงุนุท ุฃูุซูุฉ ุนูู ุจุนุถ ูู ูุฐู ุงูุฃููุฑ ูููู ูุคุซุฑ ุงูุชูููุฑ ูุงูููู ุจูุง ุนูู ุฃููุงุฑู ูุณูููู ุฎูุงู ุงูููู ุ""",

        5: """ุณ5: ูู ุชูุงุฌู ุตุนูุจุฉ ูู ุงูุณูุทุฑุฉ ุนูู ุฃููุงุฑู ุงููููุฉ ุฃู ุงูุชุญูู ูู ูุณุชูู ุงูููู ุงูุฐู ุชุดุนุฑ ุจูุ 
                    ุจุญูุซ ุชุดุนุฑ ุฃู ุงูุฃูุฑ ุฎุงุฑุฌ ุนู ุฅุฑุงุฏุชู ุฃู ุฃูู ูุณุชูุฑ ุนูู ูุญู ูุฑูููุ ุงุฌุนู ุฅุฌุงุจุชู ุชูุตูููุฉ ุจุญูุซ ุชูุถุญ ููู ูููู ุฎุงุฑุฌ ุนู ุฅุฑุงุฏุชู ุฃู ุฅูู ุฃู ูุฏู ูุฑููู.""",

        6: """ุณ6: ูู ูุชุฑุงูู ูุน ุงูุชูููุฑ ุงูููุฑุท ุฃู ุงูููู ุงููุณุชูุฑ ุซูุงุซุฉ ุฃุนุฑุงุถ ุฃู ุฃูุซุฑ ูู ุงูุฃุนุฑุงุถ ุงูุชุงููุฉ:  ุงูุดุนูุฑ ุจุนุฏู ุงูุงุฑุชูุงุญ ุฃู ุจุถุบุท ููุณู ูุจูุฑุ ุงูุฅุญุณุงุณ ุจุงูุชุนุจ ูุงูุฅุฑูุงู ุจุณูููุฉุ  ุตุนูุจุฉ ูุงุถุญุฉ ูู ุงูุชุฑููุฒุ ุงูุดุนูุฑ ุจุงูุนุตุจูุฉ ุงูุฒุงุฆุฏุฉุ ุดุฏ ุนุถูู ูุฒููุ ุงุถุทุฑุงุจุงุช ูู ุงููููุ ูุบูุฑูุงุ 
               ุงุฐูุฑ ูู ุนุฑุถ ุชุนุงูู ููู ููู ูุคุซุฑ ุนูู ููุงูู ุงูููููุฉ ูุซู ุงูุนูู ุฃู ุงูุฏุฑุงุณุฉ ุฃู ุญูุงุชู ุงูุงุฌุชูุงุนูุฉุ  ูููู ูุคุซุฑ ุนููู ุจุดูู ููููุ"""
    }


   


    answers = {}
    for i in range(1, 7):
        answers[f"q{i}"] = st.text_area(questions[i])

    if st.button("ุฅุฑุณุงู ุงูุชูููู"):
        if any(ans.strip() == "" for ans in answers.values()):
            st.error("ุงูุฑุฌุงุก ุงูุฅุฌุงุจุฉ ุนูู ุฌููุน ุงูุฃุณุฆูุฉ.")
        elif any(any(char.isascii() and char.isalpha() for char in ans) for ans in answers.values()):
            st.error("ุงูุฑุฌุงุก ุนุฏู ุงุณุชุฎุฏุงู ุฃุญุฑู ุฅูุฌููุฒูุฉ ูู ุงูุฅุฌุงุจุงุช.")
        else:
            user = st.session_state.get('user')
            if user:
                responses_col.insert_one({
                    "username": user,
                    "gender": gender,
                    "age": age,
                    **answers,
                    "timestamp": datetime.now()
                })
                st.success("ุชู ุญูุธ ุงูุฅุฌุงุจุงุช.")
            else:
                st.error("ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ุฃููุงู.")

#  ----------------- Navigation -----------------
if 'page' not in st.session_state:
    st.session_state.page = "landing"

if st.session_state.page == "landing":
    show_landing_page()
    st.stop()

if 'user' not in st.session_state:
    page = st.radio("ุงุฎุชุฑ ุงูุตูุญุฉ", ["ุชุณุฌูู ุงูุฏุฎูู", "ุชุณุฌูู ุฌุฏูุฏ"], horizontal=True)
    if page == "ุชุณุฌูู ุงูุฏุฎูู":
        login()
    else:
        signup()
    st.stop()
else:
    if st.session_state.page == "result":
        show_results()
    else:
        questionnaire()
